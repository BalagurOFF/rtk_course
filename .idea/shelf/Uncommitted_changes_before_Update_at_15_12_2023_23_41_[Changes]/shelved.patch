Index: RTK_study/contentmanagment/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import datetime\r\nfrom django.contrib.auth import get_user_model\r\nfrom django.contrib.auth.decorators import permission_required\r\nfrom django.core.paginator import Paginator\r\nfrom django.db.models import F, CharField, Q\r\nfrom django.db.models.functions import Concat\r\nfrom django.http import HttpResponseRedirect\r\nfrom django.shortcuts import render, redirect\r\nfrom django.contrib.auth.models import Permission\r\nfrom .forms import AddPublicationsForm, TagsForm, AddImageFormset\r\nfrom main.models import PublicationsModel, TagsModel, ImagesModel\r\n\r\n\r\nUser = get_user_model()\r\n\r\n\r\n@permission_required(['main.publications_editor'], raise_exception=True)\r\ndef creantepublication(request, id=None):\r\n    template_name = 'contentmanagment/addnews.html'\r\n    order_instance = PublicationsModel()\r\n    if id:\r\n        order_instance = PublicationsModel.objects.get(pk=id)\r\n    form = AddPublicationsForm(request.POST or None, instance=order_instance, prefix='main')\r\n    formset = AddImageFormset(request.POST or None, request.FILES or None, instance=order_instance, prefix='images')\r\n    if request.method == 'POST':\r\n        if form.is_valid() and formset.is_valid():\r\n            news_entry = form.save(commit=False)\r\n            news_entry.autor = request.user\r\n            news_entry.date_pub = datetime.datetime.now()\r\n            news_entry.editor = request.user\r\n            news_entry.save()\r\n            form.save_m2m()\r\n            formset.save()\r\n            url_referer = request.session['url_referer']\r\n            return HttpResponseRedirect(url_referer)\r\n    request.session['url_referer'] = request.META.get('HTTP_REFERER')\r\n    context = {'form': form, 'formset': formset}\r\n    return render(request, template_name, context)\r\n\r\n\r\n\r\n#@permission_required(['main.publications_editor'], raise_exception=True)\r\n#def addnews(request, id=None):\r\n#    context = {}\r\n#    if id:\r\n#        instance = PublicationsModel.objects.get(pk=id)\r\n#        form = AddPublicationsForm(instance=instance)\r\n#    else:\r\n#        instance = None\r\n#        form = AddPublicationsForm()\r\n#    if request.method == 'POST':\r\n#        form = AddPublicationsForm(request.POST, request.FILES, instance=instance)\r\n#        if form.is_valid():\r\n#            if id is None:\r\n#                print('!!!!!!!!!!!!!!!!!!!!!!', datetime.datetime.now())\r\n#                news_entry = form.save(commit=False)\r\n#                news_entry.autor = request.user\r\n#                news_entry.date_pub = datetime.datetime.now()\r\n#                news_entry.editor = request.user\r\n#                news_entry.save()\r\n#                form.save_m2m()\r\n#                for img in request.FILES.getlist('image_field'):\r\n#                    ImagesModel.objects.create(news=news_entry, image=img, description=img.name)\r\n#            else:\r\n#                news_entry = form.save(commit=False)\r\n#                news_entry.editor = request.user\r\n#                news_entry.save()\r\n#                form.save_m2m()\r\n#                for img in request.FILES.getlist('image_field'):\r\n#                    ImagesModel.objects.create(news=news_entry, image=img, description=img.name)\r\n#        url_referer = request.session['url_referer']\r\n#        return HttpResponseRedirect(url_referer)\r\n#    request.session['url_referer'] = request.META.get('HTTP_REFERER')\r\n#    context['form'] = form\r\n#    context['news'] = instance\r\n#    return render(request, 'contentmanagment/addnews.html', context)\r\n#\r\n\r\n@permission_required(['main.publications_editor'], raise_exception=True)\r\ndef newschange(request):\r\n    newslist = PublicationsModel.objects.filter(autor=request.user).order_by('-date_pub')\r\n    context = {'newslist': newslist}\r\n    return render(request, 'contentmanagment/newslist.html', context)\r\n\r\n\r\n@permission_required(['main.publications_editor', 'main.main_publications_editor'], raise_exception=True)\r\ndef removenews(request, news_id):\r\n    PublicationsModel.objects.filter(id=news_id).delete()\r\n    return redirect('contentmanagment:news-list', permanent=True)\r\n\r\n\r\n@permission_required(['main.tags_editor'], raise_exception=True)\r\ndef tags(request, id=None):\r\n    tags_news = TagsModel.objects.all()\r\n    if id is not None:\r\n        instance = TagsModel.objects.get(pk=id)\r\n        form = TagsForm(instance=instance)\r\n    else:\r\n        form = TagsForm()\r\n    if request.method == 'POST':\r\n        if id is not None:\r\n            instance = TagsModel.objects.get(pk=id)\r\n            form = TagsForm(request.POST, instance=instance)\r\n        else:\r\n            form = TagsForm(request.POST)\r\n        if form.is_valid():\r\n            form.save()\r\n            return redirect('contentmanagment:tags', permanent=True)\r\n    context = {\r\n        'tags': tags_news,\r\n        'form': form,\r\n        'id': id,\r\n    }\r\n    return render(request, 'contentmanagment/tags.html', context)\r\n\r\n\r\n@permission_required(['main.main_publications_editor'], raise_exception=True)\r\ndef administratenews(request):\r\n    date_start = datetime.date.today() - datetime.timedelta(days=30)\r\n    date_end = datetime.date.today()\r\n    autor_id = 0\r\n    queryset = PublicationsModel.objects.filter(Q(date_pub__date__gte = date_start) & Q(date_pub__date__lte = date_end)).order_by('-date_pub')\r\n    if request.method == 'POST':\r\n        if request.POST['date_start']:\r\n            date_start = datetime.datetime.strptime(request.POST['date_start'], \"%Y-%m-%d\")\r\n            queryset = queryset.filter(date_pub__date__gte = date_start)\r\n        if request.POST['date_end']:\r\n            date_end = datetime.datetime.strptime(request.POST['date_end'], \"%Y-%m-%d\")\r\n            queryset = queryset.filter(date_pub__date__lte = date_end)\r\n        autor_id = int(request.POST['autor'])\r\n        if autor_id != 0:\r\n            queryset = queryset.filter(autor = autor_id)\r\n\r\n    paginator = Paginator(queryset.distinct(), 20)\r\n    page_number = request.GET.get('page')\r\n    newslist = paginator.get_page(page_number)\r\n    perm = Permission.objects.get(codename='publications_editor')\r\n    autors = User.objects.filter(Q(groups__permissions=perm) | Q(user_permissions=perm)).distinct()\r\n    context = {'newslist': newslist, 'autors': autors, 'date_start': date_start.strftime('%Y-%m-%d'), 'date_end': date_end.strftime('%Y-%m-%d'), 'autor_id': autor_id}\r\n    return render(request, 'contentmanagment/adminlist.html', context)\r\n\r\n\r\n@permission_required(['main.tags_editor'], raise_exception=True)\r\ndef removetag(request, id=None):\r\n    if id is not None:\r\n        TagsModel.objects.filter(id=id).delete()\r\n        return redirect('contentmanagment:tags', permanent=True)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/RTK_study/contentmanagment/views.py b/RTK_study/contentmanagment/views.py
--- a/RTK_study/contentmanagment/views.py	
+++ b/RTK_study/contentmanagment/views.py	
@@ -34,7 +34,7 @@
             url_referer = request.session['url_referer']
             return HttpResponseRedirect(url_referer)
     request.session['url_referer'] = request.META.get('HTTP_REFERER')
-    context = {'form': form, 'formset': formset}
+    context = {'form': form, 'formset': formset, 'news': order_instance}
     return render(request, template_name, context)
 
 
